#ifndef RS_DXFCOLOR_H
#define RS_DXFCOLOR_H

#include <QColor>

#define MAX_DXF_IDX_COLOR 256
#define MAX_DXF_IDX_NAME_COLOR 10
#define MAX_SHADE_COLOR 6
#define MAX_NAME_COLOR 10

typedef struct dxfrgb {
    int r;
    int g;
    int b;
} dxfrgb_t;

class RS_DXFColor
{
public:
    RS_DXFColor(int col = 255) : m_color( (col >= 0 && col < MAX_DXF_IDX_COLOR) ? col : 255 ) { }
    void setColor(int color) { m_color = color; }

    bool hasName()
    {
        return m_color >= 0 && m_color < MAX_NAME_COLOR ? true : false;
    }

    bool pastel()
    {
        bool result = false;

        for (const auto& c : pastelPal)
        {
            if (m_color == c)
            {
                result = true;
                break;
            }
        }

        return result;
    }

    bool shade()
    {
        return m_color > 249 && m_color < 256 ? true : false;
    }

    bool solid()
    {
        bool result = false;

        for (const auto& c : solidPal)
        {
            if (m_color == c)
            {
                result = true;
                break;
            }
        }

        return result;
    }

    int color() { return m_color; }
    int r() { return dxfRGB[m_color].r; }
    int g() { return dxfRGB[m_color].g; }
    int b() { return dxfRGB[m_color].b; }

    const char* getName() {  return ((m_color >= 0) && (m_color < MAX_NAME_COLOR - 1)) ? dxfName[m_color] : qUtf8Printable(QString::number(m_color)); }

    static QColor toQColor(int index)
    {
        RS_DXFColor dc = RS_DXFColor();
        if (index >= 0 && index < MAX_DXF_IDX_COLOR)
        {
            const dxfrgb_t color = dc.dxfRGB[index];
            return QColor(color.r, color.g, color.b);
        }
        return QColor(Qt::white);
    }

    static int fromQColor(const QColor &qc)
    {
        RS_DXFColor dc = RS_DXFColor();

        for (int i = 0; i < MAX_DXF_IDX_COLOR; i++)
        {
            const dxfrgb_t color = dc.dxfRGB[i];
            if(qc.red() == color.r && qc.green() == color.g && qc.blue() == color.b)
            {
                return i + 1;
            }
        }

        return -1;
    }

    static const char* getName(int index)
    {
        qDebug() << "[RS_DXFColor::getName]" << index;
        RS_DXFColor dc = RS_DXFColor();
        return ((index >= 0) && (index < MAX_NAME_COLOR - 1)) ? dc.dxfName[index] : qUtf8Printable(QString::number(index));
    }

    static bool isValid(int index)
    {
        return (index >= 0 && index < MAX_DXF_IDX_COLOR);
    }

    static const int* solidPalette()
    {
        RS_DXFColor dc = RS_DXFColor();
        return dc.solidPal;
    }

    static const int* pastelPalette()
    {
        RS_DXFColor dc = RS_DXFColor();
        return dc.pastelPal;
    }

    static const int* namePalette()
    {
        RS_DXFColor dc = RS_DXFColor();
        return dc.namePal;
    }

    static const int* shadePalette()
    {
        RS_DXFColor dc = RS_DXFColor();
        return dc.shadePal;
    }

    static inline const char* const* nameList()
    {
        RS_DXFColor dc = RS_DXFColor();
        return dc.dxfName;
    }

private:
    int m_color;

    static inline dxfrgb_t const dxfRGB[MAX_DXF_IDX_COLOR] =
    {
        { 0,   0,   0,   },
        { 255, 0,   0,   },
        { 255, 255, 0,   },
        { 0,   255, 0,   },
        { 0,   255, 255, },
        { 0,   0,   255, },
        { 255, 0,   255, },
        { 255, 255, 255, },
        { 65,  65,  65,  },
        { 128, 128, 128, },
        { 255, 0,   0,   },
        { 255, 170, 170, },
        { 189, 0,   0,   },
        { 189, 126, 126, },
        { 129, 0,   0,   },
        { 129, 86,  86,  },
        { 104, 0,   0,   },
        { 104, 69,  69,  },
        { 79,  0,   0,   },
        { 79,  53,  53,  },
        { 255, 63,  0,   },
        { 255, 191, 170, },
        { 189, 46,  0,   },
        { 189, 141, 126, },
        { 129, 31,  0,   },
        { 129, 96,  86,  },
        { 104, 25,  0,   },
        { 104, 78,  69,  },
        { 79,  19,  0,   },
        { 79,  59,  53,  },
        { 255, 127, 0,   },
        { 255, 212, 170, },
        { 189, 94,  0,   },
        { 189, 157, 126, },
        { 129, 64,  0,   },
        { 129, 107, 86,  },
        { 104, 52,  0,   },
        { 104, 86,  69,  },
        { 79,  39,  0,   },
        { 79,  66,  53,  },
        { 255, 191, 0,   },
        { 255, 234, 170, },
        { 189, 141, 0,   },
        { 189, 173, 126, },
        { 129, 96,  0,   },
        { 129, 118, 86,  },
        { 104, 78,  0,   },
        { 104, 95,  69,  },
        { 79,  59,  0,   },
        { 79,  73,  53,  },
        { 255, 255, 0,   },
        { 255, 255, 170, },
        { 189, 189, 0,   },
        { 189, 189, 126, },
        { 129, 129, 0,   },
        { 129, 129, 86,  },
        { 104, 104, 0,   },
        { 104, 104, 69,  },
        { 79,  79,  0,   },
        { 79,  79,  53,  },
        { 191, 255, 0,   },
        { 234, 255, 170, },
        { 141, 189, 0,   },
        { 173, 189, 126, },
        { 96,  129, 0,   },
        { 118, 129, 86,  },
        { 78,  104, 0,   },
        { 95,  104, 69,  },
        { 59,  79,  0,   },
        { 73,  79,  53,  },
        { 127, 255, 0,   },
        { 212, 255, 170, },
        { 94,  189, 0,   },
        { 157, 189, 126, },
        { 64,  129, 0,   },
        { 107, 129, 86,  },
        { 52,  104, 0,   },
        { 86,  104, 69,  },
        { 39,  79,  0,   },
        { 66,  79,  53,  },
        { 63,  255, 0,   },
        { 191, 255, 170, },
        { 46,  189, 0,   },
        { 141, 189, 126, },
        { 31,  129, 0,   },
        { 96,  129, 86,  },
        { 25,  104, 0,   },
        { 78,  104, 69,  },
        { 19,  79,  0,   },
        { 59,  79,  53,  },
        { 0,   255, 0,   },
        { 170, 255, 170, },
        { 0,   189, 0,   },
        { 126, 189, 126, },
        { 0,   129, 0,   },
        { 86,  129, 86,  },
        { 0,   104, 0,   },
        { 69,  104, 69,  },
        { 0,   79,  0,   },
        { 53,  79,  53,  },
        { 0,   255, 63,  },
        { 170, 255, 191, },
        { 0,   189, 46,  },
        { 126, 189, 141, },
        { 0,   129, 31,  },
        { 86,  129, 96,  },
        { 0,   104, 25,  },
        { 69,  104, 78,  },
        { 0,   79,  19,  },
        { 53,  79,  59,  },
        { 0,   255, 127, },
        { 170, 255, 212, },
        { 0,   189, 94,  },
        { 126, 189, 157, },
        { 0,   129, 64,  },
        { 86,  129, 107, },
        { 0,   104, 52,  },
        { 69,  104, 86,  },
        { 0,   79,  39,  },
        { 53,  79,  66,  },
        { 0,   255, 191, },
        { 170, 255, 234, },
        { 0,   189, 141, },
        { 126, 189, 173, },
        { 0,   129, 96,  },
        { 86,  129, 118, },
        { 0,   104, 78,  },
        { 69,  104, 95,  },
        { 0,   79,  59,  },
        { 53,  79,  73,  },
        { 0,   255, 255, },
        { 170, 255, 255, },
        { 0,   189, 189, },
        { 126, 189, 189, },
        { 0,   129, 129, },
        { 86,  129, 129, },
        { 0,   104, 104, },
        { 69,  104, 104, },
        { 0,   79,  79,  },
        { 53,  79,  79,  },
        { 0,   191, 255, },
        { 170, 234, 255, },
        { 0,   141, 189, },
        { 126, 173, 189, },
        { 0,   96,  129, },
        { 86,  118, 129, },
        { 0,   78,  104, },
        { 69,  95,  104, },
        { 0,   59,  79,  },
        { 53,  73,  79,  },
        { 0,   127, 255, },
        { 170, 212, 255, },
        { 0,   94,  189, },
        { 126, 157, 189, },
        { 0,   64,  129, },
        { 86,  107, 129, },
        { 0,   52,  104, },
        { 69,  86,  104, },
        { 0,   39,  79,  },
        { 53,  66,  79,  },
        { 0,   63,  255, },
        { 170, 191, 255, },
        { 0,   46,  189, },
        { 126, 141, 189, },
        { 0,   31,  129, },
        { 86,  96,  129, },
        { 0,   25,  104, },
        { 69,  78,  104, },
        { 0,   19,  79,  },
        { 53,  59,  79,  },
        { 0,   0,   255, },
        { 170, 170, 255, },
        { 0,   0,   189, },
        { 126, 126, 189, },
        { 0,   0,   129, },
        { 86,  86,  129, },
        { 0,   0,   104, },
        { 69,  69,  104, },
        { 0,   0,   79,  },
        { 53,  53,  79,  },
        { 63,  0,   255, },
        { 191, 170, 255, },
        { 46,  0,   189, },
        { 141, 126, 189, },
        { 31,  0,   129, },
        { 96,  86,  129, },
        { 25,  0,   104, },
        { 78,  69,  104, },
        { 19,  0,   79,  },
        { 59,  53,  79,  },
        { 127, 0,   255, },
        { 212, 170, 255, },
        { 94,  0,   189, },
        { 157, 126, 189, },
        { 64,  0,   129, },
        { 107, 86,  129, },
        { 52,  0,   104, },
        { 86,  69,  104, },
        { 39,  0,   79,  },
        { 66,  53,  79,  },
        { 191, 0,   255, },
        { 234, 170, 255, },
        { 141, 0,   189, },
        { 173, 126, 189, },
        { 96,  0,   129, },
        { 118, 86,  129, },
        { 78,  0,   104, },
        { 95,  69,  104, },
        { 59,  0,   79,  },
        { 73,  53,  79,  },
        { 255, 0,   255, },
        { 255, 170, 255, },
        { 189, 0,   189, },
        { 189, 126, 189, },
        { 129, 0,   129, },
        { 129, 86,  129, },
        { 104, 0,   104, },
        { 104, 69,  104, },
        { 79,  0,   79,  },
        { 79,  53,  79,  },
        { 255, 0,   191, },
        { 255, 170, 234, },
        { 189, 0,   141, },
        { 189, 126, 173, },
        { 129, 0,   96,  },
        { 129, 86,  118, },
        { 104, 0,   78,  },
        { 104, 69,  95,  },
        { 79,  0,   59,  },
        { 79,  53,  73,  },
        { 255, 0,   127, },
        { 255, 170, 212, },
        { 189, 0,   94,  },
        { 189, 126, 157, },
        { 129, 0,   64,  },
        { 129, 86,  107, },
        { 104, 0,   52,  },
        { 104, 69,  86,  },
        { 79,  0,   39,  },
        { 79,  53,  66,  },
        { 255, 0,   63,  },
        { 255, 170, 191, },
        { 189, 0,   46,  },
        { 189, 126, 141, },
        { 129, 0,   31,  },
        { 129, 86,  96,  },
        { 104, 0,   25,  },
        { 104, 69,  78,  },
        { 79,  0,   19,  },
        { 79,  53,  59,  },
        { 51,  51,  51,  },
        { 80,  80,  80,  },
        { 105, 105, 105, },
        { 130, 130, 130, },
        { 190, 190, 190, }
    };

    static constexpr int solidPal[120]
    {
        18, 28, 38, 48, 58, 68, 78, 88, 98, 108, 118, 128, 138, 148, 158, 168, 178, 188, 198, 208, 218, 228, 238, 248,
        16, 26, 36, 46, 56, 66, 76, 86, 96, 106, 116, 126, 136, 146, 156, 166, 176, 186, 196, 206, 216, 226, 236, 246,
        14, 24, 34, 44, 54, 64, 74, 84, 94, 104, 114, 124, 134, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 244,
        12, 22, 32, 42, 52, 62, 72, 82, 92, 102, 112, 122, 132, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 242,
        10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240
    };

    static constexpr int pastelPal[120]
    {
        11, 21, 31, 41, 51, 61, 71, 81, 91, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 201, 211, 221, 231, 241,
        13, 23, 33, 43, 53, 63, 73, 83, 93, 103, 113, 123, 133, 143, 153, 163, 173, 183, 193, 203, 213, 223, 233, 243,
        15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 245,
        17, 27, 37, 47, 57, 67, 77, 87, 97, 107, 117, 127, 137, 147, 157, 167, 177, 187, 197, 207, 217, 227, 237, 247,
        19, 29, 39, 49, 59, 69, 79, 89, 99, 109, 119, 129, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229, 239, 249
    };

    static constexpr int namePal[MAX_NAME_COLOR] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    static constexpr int shadePal[MAX_SHADE_COLOR] { 250, 251, 252, 253, 254, 255 };

    static inline const char* const dxfName[MAX_DXF_IDX_NAME_COLOR] =
    {
        "black",
        "red",
        "yellow",
        "green",
        "cyan",
        "blue",
        "magenta",
        "white",
        "grey",
        "lightgrey"
    };
};

#endif // RS_DXFCOLOR
